#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1
script=$(readlink "$initscript")
NAME="$(basename ${script:-$initscript})"
PROG=/usr/bin/qbittorrent-nox
QBT_CONF_FILE=/tmp/qBittorrent/config/qBittorrent.conf

_info() {
	logger -p qbittorrent.info -t "$NAME" "$*"
}

_err() {
	logger -p qbittorrent.err -t "$NAME" "$*"
}

sed_options() {
	local Anchor=$1
	local category="${2// /\\\\}"
	shift; shift;

	if [ -z "$(grep ^\\[$Anchor\\]\$ $QBT_CONF_FILE)" ]; then
		[ -s "$QBT_CONF_FILE" ] && sed -i "\${/./G;s/\$/\n\[$Anchor\]/}"  "$QBT_CONF_FILE" || echo "[$Anchor]" >>"$QBT_CONF_FILE"
	fi

	local o v ol
	for o in "$@"; do
		v="$(eval echo -E "\$$o" | sed 's/[\/\.]/\\&/g')"
		[ -n "$category" ] && ol="$category\\\\$o" || ol="$o"
		ol="${ol//__/\\\\}"

		if [ -n "$v" ]; then
			if [ -z "$(grep ^$ol=.* $QBT_CONF_FILE)" ]; then
				sed -i "/\[$Anchor\]/a $ol=$v" "$QBT_CONF_FILE"
				#sed -i '/\['"$Anchor"'\]/{$ba;h;d};x;/\['"$Anchor"'\]/{x;/./{$bm;H;d};:m;x;:a;s/$/\n'"$ol=$v"'/;x;H};x' "$QBT_CONF_FILE"
			else
				[ "$Overwrite" != "1" ] && [ "$category" != "FileLogger" ] || sed -i "s/$ol=.*/$ol=$v/g" "$QBT_CONF_FILE"
			fi
		else
			[ "$Overwrite" != "1" ] && [ "$category" != "FileLogger" ] || sed -i "/$ol=.*/d" "$QBT_CONF_FILE"
		fi
	done
}

init_instance() {
	[ "$2" = 0 ] || return $2
	[ x"$EnableService" = x1 ] || return 0
	local fullTempPath
	local instance="${NAME}.$1"
	RootProfilePath=$(echo $RootProfilePath | sed 's/\(.*\)\/$/\1/')
	[ x"$BinaryLocation" = x ] || {
		[ -x "$BinaryLocation" ] || \
		chmod +x "$BinaryLocation"
		PROG="$BinaryLocation"
	}
	local confdir=qBittorrent$([ -z "$ConfigurationName" ] || echo _$ConfigurationName)

	case $TempPath in
	/*|~/*)
		fullTempPath="$TempPath"
	;;
	*)
		fullTempPath="$RootProfilePath/$confdir/$TempPath"
	;;
	esac

	local group=$(id -ng $user)
	for directory in "$RootProfilePath/$confdir" "$RootProfilePath/$confdir/config" "$SavePath" "$fullTempPath" "$FinishedTorrentExportDir" "$TorrentExportDir"; do
		if [ -n "$directory" -a ! -d "$directory" ]; then
			mkdir -m 755 -p "$directory"
			chmod -R g+w "$directory"
			chown -R "$user:$group" "$directory"
		fi
	done

	if [ "$AuthSubnetWhitelistEnabled" = "true" ]; then
		AuthSubnetWhitelist="${AuthSubnetWhitelist// /,}"
	else
		AuthSubnetWhitelist="@Invalid()"
	fi

	if [ "$CustomHTTPHeadersEnabled" = "true" ]; then
		CustomHTTPHeaders="$(echo -E "$CustomHTTPHeaders" | sed ':tag;N;s/\n/\\n/;b tag')"
	fi

	# Write to the configuration file.
	QBT_CONF_FILE="$RootProfilePath/$confdir/config/qBittorrent.conf"

	if [ "${#Password}" -eq 32 ]; then
		Password_ha1="@ByteArray($Password)"
	elif [ "${#Password}" -eq 113 ]; then
		Password_PBKDF2="@ByteArray($Password)"
	fi

	if [ -n "$SaveTime" ]; then
		[ -z "$(echo $SaveTime | sed 's/[0-9dmyDMY]//g')" ] || { _err "Error save time setted."; return 1; }

		Age="$(echo $SaveTime | sed 's/[dmyDMY]//g')"
		AgeType="$(echo $SaveTime | sed 's/[0-9]//g' | sed 's/[dD]/0/g' | sed 's/[mM]/1/g' | sed 's/[yY]/2/g')"
	fi

	if [ ! -f "$QBT_CONF_FILE" ]; then
		cat>"$QBT_CONF_FILE"<<-EOF
			[LegalNotice]
			Accepted=true

			[Network]
			Cookies=@Invalid()
		EOF
	fi

	sed_options "Core" "" \
				"AutoDeleteAddedTorrentFile"
	sed_options "BitTorrent" "Session DisableAutoTMMTriggers" \
				"CategoryChanged" "CategorySavePathChanged" "DefaultSavePathChanged"
	sed_options "BitTorrent" "Session" \
				"AnnounceToAllTiers" "BTProtocol" "CreateTorrentSubfolder" "DisableAutoTMMByDefault" "GlobalMaxSeedingMinutes" \
				"SeedChokingAlgorithm" "SlowTorrentsDownloadRate" "SlowTorrentsInactivityTimer" "SlowTorrentsUploadRate"
	sed_options "Preferences" "WebUI" \
				"Address" "AuthSubnetWhitelistEnabled" "AuthSubnetWhitelist" "CSRFProtection" "ClickjackingProtection" \
				"CustomHTTPHeadersEnabled" "CustomHTTPHeaders" "HostHeaderValidation" "HTTPS__Enabled" \
				"HTTPS__CertificatePath" "HTTPS__KeyPath" "LocalHostAuth" "Password_ha1" "Password_PBKDF2" \
				"Port" "SecureCookie" "ServerDomains" "Username" "UseUPnP"
	sed_options "Preferences" "Queueing" \
				"IgnoreSlowTorrents" "MaxActiveDownloads" "MaxActiveTorrents" "MaxActiveUploads" \
				"QueueingEnabled"
	sed_options "Preferences" "General" \
				"Locale" "UseRandomPort"
	sed_options "Preferences" "Downloads" \
				"DiskWriteCacheSize" "DiskWriteCacheTTL" "FinishedTorrentExportDir" "PreAllocation" \
				"SavePath" "StartInPause" "TempPathEnabled" "TempPath" "TorrentExportDir" \
				"UseIncompleteExtension"
	sed_options "Preferences" "Connection" \
				"GlobalDLLimit" "GlobalDLLimitAlt" "GlobalUPLimit"	"GlobalUPLimitAlt" \
				"PortRangeMin" "InetAddress" "UPnP"
	sed_options "Preferences" "Bittorrent" \
				"DHT" "Encryption" "LSD" "MaxConnecs" "MaxConnecsPerTorrent" "GlobalMaxRatio" \
				"MaxRatioAction" "MaxUploads" "MaxUploadsPerTorrent" "PeX" "uTP_rate_limited"
	sed_options "Preferences" "Advanced" \
				"AnnounceToAllTrackers" "AnonymousMode" "IgnoreLimitsLAN" "IncludeOverhead" "osCache" "OutgoingPortsMax" \
				"OutgoingPortsMin"
	sed_options "Application" "FileLogger" \
				"Enabled" "Path" "Backup" "DeleteOld" "MaxSizeBytes" "Age" "AgeType"

	[ "$Overwrite" != "1" ] || sed -i "s/\(MigrationVersion\)=.*/\1=1/g" "$QBT_CONF_FILE"

	procd_open_instance "$instance"
	procd_set_param command "$PROG"
	procd_append_param command --profile="$RootProfilePath"

	[ -z "$ConfigurationName" ] || procd_append_param command --configuration="$ConfigurationName"

	procd_set_param respawn
	procd_set_param user "$user"
	procd_set_param nice "$nice"
	procd_set_param file "$QBT_CONF_FILE"
	procd_set_param term_timeout 60
	procd_close_instance
}

service_triggers() {
	procd_add_reload_trigger "$NAME"
}

start_service() {
	uci_load_validate "$NAME" "$NAME" "main" init_instance			\
		'Address:ipaddr'											\
		'AnnounceToAllTiers:or("true","false")'						\
		'AnnounceToAllTrackers:or("true","false")'					\
		'AnonymousMode:or("true","false"):true'						\
		'AuthSubnetWhitelist:string'								\
		'AuthSubnetWhitelistEnabled:or("true","false"):false'		\
		'AutoDeleteAddedTorrentFile:or("Never","IfAdded"):Never'	\
		'BTProtocol:or("Both","TCP","UTP")'							\
		'Backup:or("true","false")'									\
		'BinaryLocation:string'										\
		'CSRFProtection:or("true","false"):false'					\
		'CategoryChanged:or("true","false"):false'					\
		'CategorySavePathChanged:or("true","false"):true'			\
		'ClickjackingProtection:or("true","false"):true'			\
		'ConfigurationName:string'									\
		'CreateTorrentSubfolder:or("true","false"):true'			\
		'CustomHTTPHeaders:string'									\
		'CustomHTTPHeadersEnabled:or("true","false"):false'			\
		'DHT:or("true","false"):true'								\
		'DefaultSavePathChanged:or("true","false"):true'			\
		'DeleteOld:or("true","false")'								\
		'DisableAutoTMMByDefault:or("true","false"):true'			\
		'DiskWriteCacheSize:integer'								\
		'DiskWriteCacheTTL:integer'									\
		'EnableService:bool:0'										\
		'Enabled:or("true","false"):true'							\
		'Encryption:or("0","1","2"):0'								\
		'FinishedTorrentExportDir:string'							\
		'GlobalDLLimit:float'										\
		'GlobalDLLimitAlt:float'									\
		'GlobalMaxSeedingMinutes:integer'							\
		'GlobalUPLimit:float'										\
		'GlobalUPLimitAlt:float'									\
		'HTTPS__CertificatePath:string'								\
		'HTTPS__Enabled:or("true","false")'							\
		'HTTPS__KeyPath:string'										\
		'HostHeaderValidation:or("true","false"):true'				\
		'IgnoreLimitsLAN:or("true","false"):true'					\
		'IgnoreSlowTorrents:or("true","false")'						\
		'IncludeOverhead:or("true","false"):false'					\
		'InetAddress:string'										\
		'LSD:or("true","false"):true'								\
		'LocalHostAuth:or("true","false"):true'						\
		'Locale:string:zh_CN'										\
		'MaxActiveDownloads:integer'								\
		'MaxActiveTorrents:integer' 								\
		'MaxActiveUploads:integer' 									\
		'MaxConnecs:integer' 										\
		'MaxConnecsPerTorrent:integer' 								\
		'GlobalMaxRatio:float' 										\
		'MaxRatioAction:or("0","1","2","3")' 						\
		'MaxSizeBytes:integer' 										\
		'MaxUploads:integer' 										\
		'MaxUploadsPerTorrent:integer' 								\
		'OutgoingPortsMax:port' 									\
		'OutgoingPortsMin:port' 									\
		'Overwrite:bool:1' 											\
		'Password:string' 											\
		'Path:string' 												\
		'PeX:or("true","false"):true' 								\
		'Port:port:8080' 											\
		'PortRangeMin:range(1024,65535)' 							\
		'PreAllocation:or("true","false"):true'						\
		'QueueingEnabled:or("true","false")' 						\
		'RootProfilePath:string:/tmp' 								\
		'SavePath:string:/tmp/download' 							\
		'SaveTime:string' 											\
		'SecureCookie:or("true","false"):true' 						\
		'SeedChokingAlgorithm:or("RoundRobin","FastestUpload","AntiLeech")' \
		'ServerDomains:string' 										\
		'SlowTorrentsDownloadRate:integer' 							\
		'SlowTorrentsInactivityTimer:integer' 						\
		'SlowTorrentsUploadRate:integer' 							\
		'StartInPause:or("true","false"):false' 					\
		'TempPath:string:temp/' 									\
		'TempPathEnabled:or("true","false"):false' 					\
		'TorrentExportDir:string' 									\
		'UPnP:or("true","false"):true' 								\
		'UseIncompleteExtension:or("true","false"):true' 			\
		'UseRandomPort:or("true","false"):true' 					\
		'UseUPnP:or("true","false"):false' 							\
		'Username:string' 											\
		'nice:range(-20,19):0' 										\
		'osCache:or("true","false")' 								\
		'uTP_rate_limited:or("true","false"):true' 					\
		'user:string:root'
}

reload_service() {
	stop
	while running "${NAME}.main"; do
		sleep 1
	done
	start
}

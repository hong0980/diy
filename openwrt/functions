/lib/functions.sh的函数详细信息和使用示例
以下是 `/lib/functions.sh` 中提供的函数详细信息和使用示例：

### debug
用于输出调试信息到 STDERR。其定义如下：
shell
debug() {
    [ "$DEBUG" = "1" ] && echo ":: $@" >&2
}
使用示例：
shell
DEBUG=1
debug "This is a debug message."
输出：
shell
:: This is a debug message.

### xor
用于对两个参数进行异或操作。其定义如下：
shell
xor() {
    local a b
    a="$1"
    b="$2"
    case ${a}${b} in
        00|11)  echo 0 ;;
        01|10)  echo 1 ;;
    esac
}
使用示例：
shell
xor 0 0  # 输出 0
xor 0 1  # 输出 1
xor 1 0  # 输出 1
xor 1 1  # 输出 0

### append
用于将第二个参数追加到第一个参数列表的末尾，并用指定的分隔符分隔。其定义如下：
shell
append() {
    eval "local old_list=\${$1:-}"
    [ -n "$old_list" ] && old_list="$old_list$2"
    [ -z "$old_list" ] && old_list="$2"
    eval "$1=\"$old_list$3\""
}
使用示例：
shell
list="apple,banana"
append list ",orange" ","
echo $list  # 输出 apple,banana,orange,

### list_contains
用于检查指定列表中是否包含指定项。其定义如下：
shell
list_contains() {
    local item list
    item="$1"
    shift
    list="$@"
    for i in $list; do
        [ "$i" = "$item" ] && return 0
    done
    return 1
}
使用示例：
shell
fruit_list="apple banana orange"
if list_contains "banana" $fruit_list; then
    echo "The list contains banana."
else
    echo "The list does not contain banana."
fi

### config_load
用于加载指定名称的 UCI 配置文件并将其解析为 shell 变量。其定义如下：
shell
config_load() {
    local file="$1"
    config_cb() {
        local __type="$1"
        local __name="$2"
        local __value="$3"
        local __cbkey="$4"
        case "$__type" in
            c)
                local __section="$__name"
                eval "__${__section}_section=\"$__section\""
                ;;
            o)
                eval "__${__section}_${__name}=\"$__value\""
                ;;
            l)
                local __listvar="__${__section}_${__name}"
                local __oldval=$(eval "echo \$$__listvar")
                if [ -z "$__oldval" ]; then
                    eval "$__listvar='$__value'"
                else
                    eval "$__listvar=\"$__oldval $__value\""
                fi
                ;;
        esac
    }
    . "${file}"
}
使用示例：
假设有一个 UCI 配置文件 `/etc/config/myconfig`，内容如下：
config foo
    option bar 'hello'
可以使用以下命令将其加载为 shell 变量：
shell
. /lib/functions.sh
config_load myconfig
foo_bar=$(config_get foo bar)
echo $foo_bar  # 输出 hello

### reset_cb
用于将 `CONFIG_CB` 变量设为空值。其定义如下：
shell
reset_cb() {
    CONFIG_CB=
}
使用示例：
shell
reset_cb
echo "$CONFIG_CB"  # 输出空行

### package
用于声明一个新的软件包。其定义如下：
shell
package() {
    # ...
}
使用示例：
shell
. /lib/functions.sh
package mypackage

### config
用于声明一个新的配置部分。其定义如下：
shell
config() {
    # ...
}
使用示例：
shell
. /lib/functions.sh
package mypackage
config mysection

### option
用于声明一个新的选项。其定义如下：
shell
option() {
    # ...
}
使用示例：
shell
. /lib/functions.sh
package mypackage
config mysection
option myoption 'hello'

### list
用于声明一个新的列表变量。其定义如下：
shell
list() {
    # ...
}
使用示例：
shell
. /lib/functions.sh
fruit_list=
list fruit_list 'apple' 'banana' 'orange'
echo $fruit_list  # 输出 apple banana orange

### config_unset
用于删除给定配置部分或选项的值。其定义如下：
shell
config_unset() {
    # ...
}
使用示例：
shell
. /lib/functions.sh
config_unset mysection myoption

### config_get
用于获取指定配置部分或选项的值。其定义如下：
shell
config_get() {
    # ...
}
使用示例：
shell
. /lib/functions.sh
package mypackage
config mysection
option myoption 'hello'
myvalue="$(config_get mysection myoption)"
echo $myvalue  # 输出 hello

### get_bool
用于将指定字符串转换为布尔值。其定义如下：
shell
get_bool() {
    # ...
}
使用示例：
shell
. /lib/functions.sh
mybool=$(get_bool "true")
echo $mybool  # 输出 1

### config_get_bool
用于获取指定配置部分或选项的布尔值。其定义如下：
shell
config_get_bool() {
    # ...
}
使用示例：
假设有一个 UCI 配置文件 `/etc/config/myconfig`，内容如下：
config foo
    option bar 'true'
可以使用以下命令获取 `bar` 的布尔值：
shell
. /lib/functions.sh
config_load myconfig
foo_bar_bool=$(config_get_bool foo bar)
echo $foo_bar_bool  # 输出 1

### config_set
用于设置指定配置部分或选项的值。其定义如下：
shell
config_set() {
    # ...
}
使用示例：
shell
. /lib/functions.sh
package mypackage
config mysection
option myoption 'hello'
config_set mysection myoption 'world'

### config_foreach
用于遍历指定配置部分或整个配置树中所有选项，调用指定的回调函数。其定义如下：
shell
config_foreach() {
    # ...
}
使用示例：
假设有一个 UCI 配置文件 `/etc/config/myconfig`，内容如下：
config foo
    option bar 'hello'
config baz
    option qux 'world'
可以使用以下命令遍历所有选项：
shell
. /lib/functions.sh
config_load myconfig
callback() {
    local type="$1"
    local name="$2"
    local value="$3"
    echo "$type $name $value"
}
config_foreach callback
输出：
o foo.bar hello
o baz.qux world

### config_list_foreach
用于遍历指定列表中的所有元素，调用指定的回调函数。其定义如下：
shell
config_list_foreach() {
    # ...
}
使用示例：
shell
. /lib/functions.sh
fruit_list="apple banana orange"
callback() {
    echo "I like $1"
}
config_list_foreach callback $fruit_list
输出：
I like apple
I like banana
I like orange

### default_prerm
在软件包卸载之前执行的默认脚本。其定义如下：
shell
default_prerm() {
    # ...
}
使用示例：
可在软件包安装时声明 `preinst` 脚本，在卸载时调用该函数。

### add_group_and_user
如果指定的用户组和用户不存在，则创建它们。其定义如下：
shell
add_group_and_user() {
    # ...
}
使用示例：
shell
. /lib/functions.sh
add_group_and_user mygroup myuser

### default_postinst
在软件包安装之后执行的默认脚本。其定义如下：
shell
default_postinst() {
    # ...
}
使用示例：
可在软件包安装时声明 `postinst` 脚本，在安装完软件包后调用该函数。

### include
用于包含指定名称的 shell 脚本文件。其定义如下：
shell
include() {
    # ...
}
使用示例：
shell
. /lib/functions.sh
include /usr/lib/myfunctions.sh

### find_mtd_index
用于查找指定名称的 MTD 分区所在的索引。其定义如下：
shell
find_mtd_index() {
    # ...
}
使用示例：
shell
. /lib/functions.sh
myindex=$(find_mtd_index mypartition)
echo $myindex

### find_mtd_part
用于查找具有指定属性值的 MTD 分区。其定义如下：
shell
find_mtd_part() {
    # ...
}
使用示例：
shell
. /lib/functions.sh
mypart=$(find_mtd_part "ubi.mypartition")
echo $mypart

### group_add
添加指定名称和 ID 的用户组。其定义如下：
shell
group_add() {
    # ...
}
使用示例：
shell
. /lib/functions.sh
group_add mygroup 1234

### group_exists
检查指定名称或 ID 的用户组是否存在。其定义如下：
shell
group_exists() {
    # ...
}
使用示例：
shell
. /lib/functions.sh
if group_exists mygroup; then
    echo "The group exists."
else
    echo "The group does not exist."
fi

### group_add_next
给定一个数字，创建一个新的用户

以下是 `user_add` 和 `user_exists` 函数的使用示例：
sh
# 添加名为 "test"，UID 为 1000 的用户
user_add test 1000
# 添加名为 "test2"，UID 为 2000，GID 为 2000 的新用户
user_add test2 2000 2000
# 检查是否存在名为 "test" 的用户，返回值为真（0）
user_exists test && echo "User test exists"
# 检查是否存在名为 "test3" 的用户，返回值为假（1）
user_exists test3 || echo "User test3 does not exist"

`board_name` 函数可以使用以下方式进行调用：
sh
# 输出当前设备名称
echo "Current device: $(board_name)"
